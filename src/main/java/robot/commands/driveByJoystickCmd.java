// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import robot.RobotContainer;
import edu.wpi.first.wpilibj.Joystick;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import robot.subsystems.drivetrainSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveByJoystickCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final drivetrainSubSys m_drivetrainSubSys;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // speed/rotation in/out
    private double spdIn = 0.0;
    private double spdOut = 0.0;
    private double rotIn = 0.0;
    private double rotOut = 0.0;

    // Lerp dampening values
    private static double spdDampening = 0.1;
    private static double rotDampening = 0.1;

    //Joystick driveJoy = RobotContainer.getInstance().getdriverJoystick();
    RobotContainer robot;
    Joystick driver_joystick;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public driveByJoystickCmd(drivetrainSubSys subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrainSubSys = subsystem;
        addRequirements(m_drivetrainSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        robot = RobotContainer.getInstance();
        driver_joystick = robot.getdriverJoystick();
        spdOut = 0.0;
        rotOut = 0.0;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // get joystick input
        double throttle = driver_joystick.getThrottle();
        spdIn = driver_joystick.getY();
        rotIn = -driver_joystick.getTwist();
        
        // calculate lerpage
        spdOut = Lerp(spdOut, spdIn, spdDampening);
        rotOut = Lerp(rotOut, rotIn, rotDampening);
        
        // apply throttle
        throttle = (-throttle/2) + 0.5; // convert -1:1 to 0:1
        double throttledSpd = spdOut * throttle;
        double throttledRot = rotOut * throttle;

        m_drivetrainSubSys.arcadeDrive(throttledSpd, throttledRot);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        spdOut = 0.0;
        rotOut = 0.0;
        m_drivetrainSubSys.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }

    // Linear Interpolation
    // returns a value between a and b by percentage t
    public double Lerp(double a, double b, double t) {
        return a + ((b - a) * t);
    }
}
